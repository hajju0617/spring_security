spring:
  config:
    import: optional:file:.env                        # optional : .env 파일이 없더라도 컴파일 에러가 발생 X
                                                      # file : 파일을 import 하겠다
                                                      # .env : 파일명
  application:
    name: GreengramVer3
  jackson:
    deserialization:
      fail-on-unknown-properties: false

  datasource:
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
    url: jdbc:log4jdbc:mariadb://localhost:3306/greengram2024_security    # 데이터 베이스 이름
    username: root                # 아이디
    password: green502            # 비밀번호

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${SOCIAL.GOOGLE.CLIENT_ID}
            client-secret: ${SOCIAL.GOOGLE.SECRET}
            scope:
              - email
              - profile
          kakao:
            client-id: ${SOCIAL.KAKAO.CLIENT_ID}
            client-secret: ${SOCIAL.KAKAO.SECRET}
            client-authentication-method: client_secret_post    # 쿼리 스트링 client-id, client-secret 가 카카오쪽으로 보내진다.
            authorization-grant-type: authorization_code        # 권한 부여 유형 (인가 코드 -> access-token 을 받는 방식을 선택)
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"   # redirect-uri: http://localhost:8080/login/oauth2/code/kakao 와 같은 의미
            scope:
              - profile_nickname
              - profile_image
            client-name: Kakao
          naver:
            client-id: ${SOCIAL.NAVER.CLIENT_ID}
            client-secret: ${SOCIAL.NAVER.SECRET}
            client-authentication-method: client_secret_post    # 쿼리 스트링 client-id, client-secret 가 카카오쪽으로 보내진다.
            authorization-grant-type: authorization_code        # 권한 부여 유형 (인가 코드 -> access-token 을 받는 방식을 선택)
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"   # redirect-uri: http://localhost:8080/login/oauth2/code/NAVER 와 같은 의미
            scope:
              - name
              - email
              - profile_image
            client-name: Kakao
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize    #소셜 로그인 버튼을 눌렀을 때 이동할 URL
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-info-authentication-method: header                       #사용자 정보를 가져올 때 토큰을 보내는 방법 , 속성값(header, form(Body), query), header가 기본값
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize   #소셜 로그인 버튼을 눌렀을 때 이동할 URL
            token-uri: https://nid.naver.com/oauth2.0/token               #사용자 서비스 서버가 Redirect URI로 전달받은 (인가 코드)로 (액세스 토큰)을 요청하는 URI
            user-info-uri: https://openapi.naver.com/v1/nid/me            #서비스 서버가 발급받은 액세스 토큰으로 사용자 정보를 가져오는 URI
            user-name-attribute: response

  servlet:
    multipart:
      max-file-size: 30MB
      max-request-size: 50MB

mybatis:
  mapper-locations: mappers/**/*.xml     # resources 아래에 xml 담긴 (mappers) 폴더이름

springdoc:
  api-docs:
    version: openapi_3_1
  swagger-ui: # swagger UI 설정
    path: /swagger    # localhost:8080/swagger 로 접속할 수 있게 설정  (redirect)
    operations-sorter: method   # alpha (default) : url 기준 정렬, method : http - method 기준 정렬
    default-model-expand-depth: 10
    default-models-expand-depth: 10
    display-request-duration: true   #try it out 을 했을때 request duration(처리 소요시간)을 추가로 찍어줌
  cache:
    disabled: true

file:
  directory: D:/2024-1/download/greengram_security/       #    절대 주소값 저장

# custom 속성 지정
app:
  jwt:
    # JWT 만들 때 사용하는 키(암호화) -> 나중에 복호화 할때도 사용
    secret: ${JWT_SECRET}
#    DaeguGreenArtAcademyClass502RoomForSpringBootFightingsdkfjslkjflksajdffdskljdkdjfkasdfiagfddfdfddd   # 키 값 : value 값

    # front - back 간 JWT 받는 헤더 키 이름
    header-schema-name: authorization

    # 토큰의 종류: Bearer 는 JWT or OAuth2.0(소셜 로그인)를 의미
    token-type: Bearer


    # AT(Access-Token) - 만료 시간 (ms -> 2시간)
    access-token-expiry: 30000
    # 1800000 : 30분, 600000 : 10분

    # RT(Refresh-Token) - 만료시간(ms) - 15일
    refresh-token-cookie-name: refresh-token
    refresh-token-expiry: 1296000000
  oauth2:
    authorization-request-cookie-name: oauth2_auth_request
    redirect-uri-param-cookie-name: redirect_uri
    cookie-expiry-seconds: 180
    authorized-redirect-uris:
      - http://localhost:3000/oauth/redirect
      - http://localhost:8080/oauth/redirect
      - http://192.168.0.144:5122/oauth/redirect      # 내부 도커 서버 IP
      - http://112.222.157.156:5122/oauth/redirect    # 외부 IP

management:
  endpoint:               # 엔드 포인트 (URL)
    health:
      show-details: always      # http://localhost:8080/actuator/health 정보를 추가로 더 보여줌 (디테일한 정보)

  endpoints:              # 전체 엔드 포인트 세팅
    web:
      exposure:
        include: "*"      # actuator의 모든 엔드 포인트를 웹에 노출  (http://localhost:8080/actuator)
  info:                   # 엔드 포인트 이지만 endpoint 아래에 있지 않고, management 아래에 위치
    java:
      enabled: true       # http://localhost:8080/actuator/info 값 뜨게 해줌
    os:
      enabled: true
    env:
      enabled: true
  server:
    port: 8080            # 로컬로만 접속해야 접속가능






---                       #  --- : 파일안에서 분리 해줌 (위쪽은 프로필 설정 x)
spring:
  config:
    activate:
      on-profile: tdd
  datasource:
    url: jdbc:log4jdbc:mariadb://localhost:3306/greengram2024_v3tdd_test
  sql:
    init:
      mode: always    # tdd 프로필을 쓸때 매번 data.sql, schema.sql 을 실행 하겠다는 의미
                      # edit configurations -> profile active 칸에 프로필 이름 입력 하면 됨



---

spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: jdbc:log4jdbc:mariadb://192.168.0.144:3306/db_odd_first_4
    username: odd_first_4
    password: cell
file:
  directory: /home/download   # 혹시나 파일 업로드가 있다면

                              # 설정 완료 -> 우측 상단 코끼리 -> Tasks -> build -> bootJar 실행
                              # -> 좌측 파일 탐색기에 주황build -> ilbs -> jar파일

  # jar 파일 경로 복사 -> cmd -> cd 경로값(엔터) -> D:(엔터) -> java -jar jar파일명  --spring.profiles.active=prod(엔터)

  # 다른 작업할때는 상단 실행버튼 좌측 화살표 클릭 -> Edit Configurations -> active profiles 값 수정



